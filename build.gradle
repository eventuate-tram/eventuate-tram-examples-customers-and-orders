buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    }
}

subprojects {

    apply plugin: "java-library"

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    repositories {
        mavenCentral()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }

    dependencies {
        implementation(platform("io.eventuate.platform:eventuate-platform-dependencies:$eventuatePlatformVersion"))

        implementation(platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"))
        implementation(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))
        testImplementation "junit:junit:4.13.2"

        constraints {
                implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:$springDocOpenApiUiVersion")
        }
        testImplementation "org.springframework.boot:spring-boot-starter-test"
    }


    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters"
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }

//    configurations.all {
//        resolutionStrategy.cacheChangingModulesFor 10, 'minutes'
//    }


}

task compileAll(type: GradleBuild) {
    tasks = ["endToEndTestClasses", "componentTestClasses", "testClasses", "assemble"]
}

task preCommitCheck {

}

task circleciConfigValidate(type: Exec) {
    commandLine 'circleci', 'config', 'validate'
}

preCommitCheck.finalizedBy(circleciConfigValidate)
